# TODO:
#   * Environment variables RUST_BACKTRACE=1
#   * Build release and upload artifacts
#   * Nightly run for cargo audit
#   * Cache? See https://github.com/marketplace/actions/cache and https://help.github.com/en/actions/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows

on: [push, pull_request]

name: Continuous integration

env:
  RUST_BACKTRACE: 1

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.39.0
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # check:
  #   name: Check
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       rust:
  #         - 1.39.0
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: ${{ matrix.rust }}
  #         override: true
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: check

  test:
    name: Test Suite
    needs: fmt
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust:
          - 1.39.0
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Build (cargo build)
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Build tests (cargo test)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-run
      - name: Test (cargo test)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast
  # clippy:
  #   name: Clippy
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       rust:
  #         - 1.39.0
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: ${{ matrix.rust }}
  #         override: true
  #     - run: rustup component add clippy
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: clippy
  #         args: -- -D warnings

  # Inspired by https://github.com/BurntSushi/ripgrep/blob/8cb7271b647f63420530ac04bc13ed8ea7353690/.github/workflows/ci.yml#L10-L101
  release:
    name: Build release binary
    # if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          - musl
          - macos
          - win-msvc-64
        include:
          - build: musl
            os: ubuntu-18.04
            rust: 1.39.0
            target: x86_64-unknown-linux-musl
            archive: pycors-${{ github.ref }}-${{ matrix.target }}.tar.gz
            mime: application/gzip
          - build: macos
            os: macOS-10.14
            rust: 1.39.0
            target: x86_64-apple-darwin
            archive: pycors-${{ github.ref }}-${{ matrix.target }}.tar.gz
            mime: application/gzip
          - build: win-msvc-64
            os: windows-2019
            rust: 1.39.0
            target: x86_64-pc-windows-msvc
            archive: pycors-${{ github.ref }}-${{ matrix.target }}.zip
            mime: application/zip
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install Rust Target
        run: rustup target add ${{ matrix.target }}
      - name: Install musl-gcc
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get install musl-tools
      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Create Release
        # Create release only once (from Linux)
        if: contains(matrix.target, 'musl')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
        with:
          tag_name: testing-release-${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: true

      - name: Package artifacts
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
            7z a ../../../${{ matrix.archive }} pycors.exe
          else
            tar czvf ../../../${{ matrix.archive }} pycors
          fi
          cd -
      - name: Upload assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.archive }}
          asset_name: ${{ matrix.archive }}
          asset_content_type: ${{ matrix.mime }}
