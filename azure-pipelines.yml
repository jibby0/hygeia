trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

resources:
  repositories:
    - repository: templates
      type: github
      name: xoac/rust-azure-pipelines
      ref: refs/heads/master ## TODO you may want to change it to refs/tags/TAG_NAME.
      endpoint: PipelinesTemplates
  containers:
  - container: tarpaulin
    image: xd009642/tarpaulin@sha256:e94bf79f5d60fd021383cdc011182066999a395223976b071fc9f8b75d10a35c
    options: --security-opt seccomp=unconfined

jobs:
# Check formatting
- template: ci/rustfmt.yml@templates
  parameters:
    name: rustfmt
    displayName: Check formatting

# Cargo check
- template: ci/cargo-check.yml@templates
  parameters:
    name: cargo_check
    dependsOn:
      - rustfmt
    displayName: Cargo check

# This represents the minimum Rust version supported.
# Tests are not run as tests may require newer versions of rust.
- template: ci/cargo-check.yml@templates
  parameters:
    name: minrust
    rust_version: 1.31.0 # The 2018 edition
    displayName: Verify minimum Rust version

- template: ci/cargo-clippy.yml@templates
  parameters:
    name: clippy
    dependsOn:
      - rustfmt
    rust: stable
    displayName: Clippy (linter)

################
# Test stage   #
###############

# Test stable
- template: ci/test.yml@templates
  parameters:
    dependsOn:
      - cargo_check
    name: cargo_test_stable
    displayName: Cargo test
    cross: true # Test on Windows and macOS

# # Test nightly
# - template: ci/test.yml@templates
#   parameters:
#     name: cargo_test_nightly
#     displayName: Cargo test
#     rust_version: nightly

# # Test cross
# # List of supported targets is available here: https://github.com/rust-embedded/cross#supported-targets
# - template: ci/cargo-cross.yml@templates
#   parameters:
#         name: cargo_cross
#         displayName: Cross check and test
#         rust_version: stable # You can specify here beta nightly or even 1.31
#         check_targets:
#           - x86_64-unknown-linux-gnu
#           - x86_64-unknown-linux-musl
#           - x86_64-apple-darwin
#           - x86_64-pc-windows-msvc
#         test_targets:
#           - x86_64-unknown-linux-gnu
#           - x86_64-unknown-linux-musl
#           - x86_64-apple-darwin
#           - x86_64-pc-windows-msvc

- job: code_coverage
  displayName: "Code coverage (tarpaulin)"
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    CARGO_TERM_VERBOSE: true
  container: tarpaulin
  steps:
    - script: time cargo tarpaulin --out Xml
      displayName: "Run tarpaulin"

###################
#    DEPLOY PART  #
###################
# TODO you need to modify git parameters and specify variable in pipeline. See [README.md](https://github.com/xoac/rust-azure-pipelines/blob/master/README.md)

# # Deploy doc
# - template: ci/github-deploy-doc.yml@templates
#   parameters:
#     name: github_deploy_doc
#     dependsOn:
#       - cargo_test_stable
#       - cargo_check
#       - cargo_cross
#     github:
#      user: xoac
#      email: sylwesterrapala@outlook.com
#      repo: https://github.com/xoac/rust-azure-pipelines/

# # Release binary
# - template: ci/github-release.yml@templates
#   parameters:
#    name: github_release
#    dependsOn:
#       - minrust
#       - rustfmt
#       - cargo_check
#       - cargo_test_stable
#       # - cargo_cross
#    rust_version: stable
#    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
#    contents: |
#      *
#      !*.rlib
#      !*.d
#      !.*
#    targets:
#     - x86_64-unknown-linux-gnu
#     - x86_64-unknown-linux-musl
#     # - x86_64-apple-darwin
#     # - x86_64-pc-windows-msvc
#    github:
#     gitHubConnection: PipelinesTemplates # TODO githubConnection that allow you write to repo.
#     repositoryName: xoac/rust-azure-pipelines
#     isPreRelease: true


- job: github_release
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
  displayName: "Release to github"
  dependsOn:
    - minrust
    - rustfmt
    - cargo_check
    - cargo_test_stable
  strategy:
    matrix:
      Linux:
        vmImage: ubuntu-16.04
      MacOS:
        vmImage: macOS-10.13
      Windows:
        vmImage: vs2017-win2016
  pool:
    vmImage: $(vmImage)

  steps:
  - template: ci/install-rust.yml@templates

  - bash: |
      MY_TAG="$(Build.SourceBranch)"
      MY_TAG=${MY_TAG#refs/tags/}
      echo $MY_TAG
      echo "##vso[task.setvariable variable=build.my_tag]$MY_TAG"
      DATE="$(date +%Y-%m-%d)"
      echo "##vso[task.setvariable variable=build.date]$DATE"
      CI_CURRENT_TARGET=$(rustup target list | grep '(default)' | awk '{print $1}')
      echo "##vso[task.setvariable variable=build.ci_current_target]$CI_CURRENT_TARGET"
    displayName: "Create date and tag variables"

  - script: |
          cargo build --release
    env:
      LOOM_MAX_DURATION: 10
      CI: 'True'
    displayName: Relase build

  - task: CopyFiles@2
    displayName: Copy files
    inputs:
      contents: |
        *
        !*.rlib
        !*.d
        !.*
      sourceFolder: '$(Build.SourcesDirectory)/target/release'
      targetFolder: '$(Build.BinariesDirectory)/$(build.ci_current_target)'

  - task: ArchiveFiles@2
    displayName: Gather assets
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/$(build.ci_current_target)'
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/pycors-$(build.my_tag)-$(build.ci_current_target).tar.gz'

  - task: GitHubRelease@0
    displayName: Create release
    inputs:
      gitHubConnection: PipelinesTemplates
      tagSource: manual
      title: '$(build.my_tag) - $(build.date)'
      tag: '$(build.my_tag)'
      action: edit
      assetUploadMode: 'replace'
      # isPreRelease: false
      # isDraft: false
